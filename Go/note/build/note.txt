编译代码包的顺序：
	依赖代码包 -> 当前代码包（相对依赖包而言） -> 触发代码包

go get命令：
	-d:		让命令程序只执行下载动作，而不执行安装动作
	-u:		让命令利用网络来更新已有代码包及其依赖包。默认情况下，
				该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包

go build命令：
	-a:		强行对所有涉及到的代码包（包含标准库中的代码包）进行重新构建，即使它们已经是最新的了。
	-n:		打印编译期间所用到的其它命令，但是并不真正执行它们。
	-x:		打印编译期间所用到的其它命令。注意它与-n标记的区别。
	-p n:	指定编译过程中执行各任务的并行数量，在默认情况下，该数量等于CPU的逻辑核数
	-race:	开启竞态条件的检测。
	-v:		打印出那些被编译的代码包的名字。
	-work:	打印出编译时生成的临时工作目录的路径，并在编译结束时保留它。在默认情况下，编译结束时会删除该目录。

	-asmflags:
	-buildmode:
	-compiler:
	-gccgoflags:
	-gcflags:
	-installsuffix:
	-ldflags:
	-linkshared:
	-pkgdir:
	-tags:
	-toolexec:













#############################################################################################
参考资料：
	http://wiki.jikexueyuan.com/project/go-command-tutorial/0.1.html